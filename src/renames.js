export const type_mapping = new Map()

type_mapping.set('shorthand_property_identifier', 'Property')
type_mapping.set('shorthand_property_identifier_pattern', 'Property')

// one of the weirder ones, apparently object is the only valid parent of pair_pattern
type_mapping.set('pair', 'Property')
type_mapping.set('pair_pattern', 'Property')

type_mapping.set('switch_default', 'SwitchCase')
type_mapping.set('subscript_expression', 'MemberExpression')
type_mapping.set('generator_function_declaration', 'FunctionDeclaration')
type_mapping.set('generator_function', 'FunctionExpression')
type_mapping.set('array', 'ArrayExpression')
type_mapping.set('namespace_import', 'ImportNamespaceSpecifier')
type_mapping.set('import_statement', 'ImportDeclaration')
type_mapping.set('this', 'ThisExpression')
type_mapping.set('class', 'ClassExpression')
type_mapping.set('field_definition', 'PropertyDefinition')
type_mapping.set('lexical_declaration', 'VariableDeclaration')
type_mapping.set('ternary_expression', 'ConditionalExpression')
type_mapping.set('template_string', 'TemplateLiteral')
type_mapping.set('private_property_identifier', 'PrivateIdentifier')
type_mapping.set('property_identifier', 'Identifier')
type_mapping.set('rest_pattern', 'RestElement')
type_mapping.set('arrow_function', 'ArrowFunctionExpression')
type_mapping.set('statement_block', 'BlockStatement')
type_mapping.set('statement_identifier', 'Identifier')
type_mapping.set('object', 'ObjectExpression')
type_mapping.set('string', 'Literal')
type_mapping.set('number', 'Literal')
type_mapping.set('regex', 'Literal')

export const field_map = new Map()
field_map.set('condition', 'test')
field_map.set('alternative', 'alternate')
field_map.set('consequence', 'consequent')
field_map.set('new_expression', 'expression')
field_map.set('call_expression', 'expression')
field_map.set('constructor', 'callee')
field_map.set('function', 'callee')
